np.array([1, 2, 3]);creates a 1-dimensional array with elements 1, 2, and 3
np.zeros((2, 3));creates a 2x3 array filled with zeros
np.ones((3, 3), dtype=np.float32);creates a 3x3 array filled with ones of dtype float32
array.shape;returns the shape of an array, e.g., (3, 4)
array.ndim;returns the number of dimensions of an array, e.g., 3
np.array([1, 2, 3]).dtype;returns the datatype of elements, e.g., float64
array[:, 1];selects the second column of a 2D array
array[1, -1];selects the last element of the second row in a 2D array
array[array > 5];filters elements greater than 5 in an array
np.concatenate((array1, array2), axis=0);concatenates arrays vertically
np.stack((array1, array2), axis=1);stacks arrays horizontally with explicit axis
np.tile(array, (2, 3));tiles the array into a 2x3 grid
result = array1 + array2;element-wise addition of two arrays
result = (array1 >= 0) & (array2 < 10);element-wise logical AND operation
result = np.broadcast_to(array[:, np.newaxis], (3, 4));broadcasts array to shape (3, 4)
np.sum(array, axis=1);sums elements along rows in a 2D array
np.mean(array, axis=0);calculates mean along columns in a 2D array
np.max(array, axis=(0, 1));finds maximum element across all dimensions
np.cumsum(array);computes cumulative sum of elements along a flattened array
np.diff(array);calculates the differences between consecutive elements in an array
np.cumprod(array);computes cumulative product of elements along a flattened array
np.sort(array, axis=1);sorts elements along rows of a 2D array
np.argsort(array);returns indices that would sort an array
np.argmax(array, axis=0);finds indices of maximum elements along columns
Array Element; A single value in an array, accessible by its indices.
Vectorization; The process of applying operations element-wise to entire arrays, avoiding explicit loops.
SIMD (Single Instruction, Multiple Data); A parallel processing technique where a single instruction is applied to multiple data elements simultaneously.
Broadcasting; A set of rules for performing element-wise operations on arrays of different shapes during vectorized computations.
Element-wise Operation; An operation performed independently on each element of an array.
Corresponding element; In a binary elementwise operation on A and B, the element of A at a given index is combined with the element of B at the same index.
Dot Product; A mathematical operation that calculates the sum of products of corresponding elements of two arrays.
Vector; A one-dimensional array representing a list of scalar values.
Matrix; A two-dimensional array with rows and columns used for mathematical operations.
Tensor; A multi-dimensional array with more than two dimensions, essential in deep learning.
Tensor rank; The number of dimensions of a tensor.
Indexing; Accessing specific elements in an array using integer or boolean indices. Reduces rank.
Slicing; Extracting specific portions of an array to create a new array. Preserves rank.
Flattening; Converting a multi-dimensional array into a one-dimensional array.
Vectorized Function; A function optimized for array input, performing element-wise operations.
Element-wise Comparison; Comparing corresponding elements of two arrays element by element.
Data Type (dtype); Specifies the type of elements in an array, such as int, float, or complex.
Shape; Describes the size of each dimension in an array, e.g., (3, 4) for a 2D array.
np.zeros((2, 3), dtype=np.float64);creates a 2x3 array filled with zeros of dtype float64
np.ones((3, 3), dtype=np.int32);creates a 3x3 array filled with ones of dtype int32
np.full((2, 2), 7.5);creates a 2x2 array filled with 7.5
np.arange(0, 10, 2);creates an array from 0 to 10 with a step of 2, [0, 2, 4, 6, 8]
np.linspace(0, 1, 5);creates an array of 5 evenly spaced values between 0 and 1, [0.0, 0.25, 0.5, 0.75, 1.0]
np.eye(3);creates a 3x3 identity matrix, where diagonal elements are 1 and others are 0
np.random.rand(2, 2);creates a 2x2 array with random values between 0 and 1
np.empty((3, 3));creates an uninitialized 3x3 array, often filled with garbage values
np.arange(12).reshape(3, 4);creates a 3x4 array and reshapes it, [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]]
Scalar Broadcasting; Broadcasting a scalar to an array, applying the scalar to every element.
Shape Compatibility; Arrays are broadcastable if their shapes are compatible or if one of them is a scalar.
Broadcasting compatibility rule; A+B is okay if; B is scalar; A.shape==B.shape; or A.shape[:-n]==B.shape[:-n] for some n.
Broadcastable Dimensions; Dimensions are broadcastable if they are equal or one of them is 1.
Broadcastable array shape; (3, 1, 4) and (1, 4) are broadcastable, resulting in shape (3, 1, 4) after broadcasting.
Broadcastable array shape; (2, 3) and (3,) are broadcastable, resulting in shape (2, 3) after broadcasting.
Broadcastable array shape; (2, 1, 3) and (2,3,1) are broadcastable, resulting in shape (2, 3, 3) after broadcasting.
Unbroadcastable array shape; (3, 3) and (2, 4) are not broadcastable; broadcasting fails due to incompatible dimensions.
Array Slicing; Extracting a portion of an array by specifying a range of indices or dimensions. Example: array[1:3, :].
Array Indexing; Accessing specific elements in an array using integer or boolean indices. Example: array[0, 4].
Array Mapping; Applying a function to each element of an array, creating a new array. Example: np.sin(array).
Array Filtering; Selecting elements from an array based on a condition, creating a filtered array. Example: array[array > 5].
Array Reduction; Combining elements of an array to produce a single result (e.g., sum, mean). Example: np.sum(array).
Array Scans; Performing a cumulative operation on elements, building an array of partial results. Example: np.cumsum(array).
Array Searching; Finding the index or position of a specific value or condition in an array. Example: np.argmax(array).
Array Sorting; Rearranging elements in ascending or descending order within an array. Example: np.sort(array).
Arg*; Functions that return the indices of elements that satisfy a condition, like np.argmax and np.argmin.
np.transpose(array); Swaps the dimensions of an array, effectively rotating it.
np.concatenate((array1, array2), axis=0); Joins arrays along an existing axis, creating a new array.
np.max(array, axis=None); Returns the maximum value along the specified axis or the flattened array.
np.min(array, axis=None); Returns the minimum value along the specified axis or the flattened array.
np.mean(array, axis=None); Computes the arithmetic mean along the specified axis or the flattened array.
np.sum(array, axis=None); Calculates the sum of array elements along the specified axis or the flattened array.
np.std(array, axis=None); Computes the standard deviation along the specified axis or the flattened array.
np.argmin(array, axis=None); Returns the indices of the minimum values along the specified axis or flattened array.
np.argmax(array, axis=None); Returns the indices of the maximum values along the specified axis or flattened array.
np.argsort(array, axis=-1); Returns the indices that would sort the array along the specified axis.
np.where(condition, [x, y]); Returns elements chosen from x or y depending on the condition.
np.unique(array); Finds the unique elements of an array and returns them in sorted order.
np.clip(array, a_min, a_max); Clips the values in an array to be within a specified range.
np.exp(array); Computes the exponential of each element in the input array.
np.log(array); Computes the natural logarithm of each element in the input array.
np.sqrt(array); Computes the square root of each element in the input array.
np.sin(array), np.cos(array), np.tan(array); Computes trigonometric functions element-wise.
np.logical_and(array1, array2); Computes the element-wise logical AND of two arrays.
np.logical_or(array1, array2); Computes the element-wise logical OR of two arrays.
np.logical_not(array); Computes the element-wise logical NOT of the input array.
np.isnan(array); Detects NaN (Not a Number) elements in an array.
np.nonzero(array); Returns the indices of the elements that are non-zero (or True).
np.unravel_index(indices, shape); Converts a flat index or array of flat indices into a tuple of coordinate arrays, e.g. from np.argmax.
np.isinf(array); Detects infinite elements in an array.
np.floor(array); Rounds down the elements of an array to the nearest integer.
np.ceil(array); Rounds up the elements of an array to the nearest integer.
np.random.randint(low, high, size=None); Generates random integers from low (inclusive) to high (exclusive).
np.random.normal(mean, std_dev, size=None); Generates random samples from a normal distribution with specified mean and standard deviation.
np.random.choice(array, size=None, replace=True); Generates a random sample from a given 1-D array.
np.random.DefaultRNG(seed=None); Creates a random number generator with a specified seed.
rng.uniform(low=0.0, high=1.0, size=None); Generates random numbers from a uniform distribution from a pre-created generator.
