@ (Matrix Multiplication Operator); Performs matrix multiplication between two arrays. Example: result = x @ y computes the matrix multiplication of arrays x and y.
& (Bitwise AND operator); Performs element-wise logical AND between two arrays. Example: x & y computes the element-wise logical AND between arrays x and y.
| (Bitwise OR operator); Performs element-wise logical OR between two arrays. Example: x | y computes the element-wise logical OR between arrays x and y.
~ (Bitwise NOT operator); Performs element-wise logical NOT on an array. Example: ~x computes the element-wise logical NOT of array x.
anp.grad(fn); with autograd takes a function fn and returns a function that computes the gradient of fn with respect to its inputs. Example: grad_fn = grad(fn) returns a function grad_fn that computes the gradient of fn with respect to its inputs.
array.astype(dtype); Casts the array to the specified data type. Example: x.astype(np.float64) converts the array x to the data type float64.
array.dtype; Returns the data type of the array elements. Example: x.dtype returns the data type of elements in array x.
array.ndim; Returns the number of array dimensions. Example: x.ndim returns the number of dimensions of array x.
array.ravel() or array.flatten(); Returns a flattened array containing the same elements as the input array. Example: x.ravel() returns a flattened version of array x.
array.shape; Returns a tuple representing the dimensions of the array. Example: x.shape returns the dimensions of array x.
array.strides; Returns a tuple of bytes to step in each dimension when traversing an array. Example: x.strides returns the strides of array x.
array.T; Returns the transposed array. Example: x.T transposes the array x. For higher-dimensional arrays, reverses the order of the axes.
array[:, np.newaxis] or array[:, None]: Adds a new axis to an array. Example: x[:, np.newaxis] adds a new (singleton) axis at the end of array x.
array[..., 0]; The ellipsis (...) represents as many colons as needed to produce a complete indexing tuple. Example: x[..., 0] returns the first element of the last axis of array x. 
array[condition]; Returns an array containing elements from the input array where the condition is True. Example: x[x > 0] returns an array containing all positive elements of x.
array[index_array]; Returns an array containing elements from the input array at the specified indices. Example: x[[0, 2, 4]] returns an array containing the elements at indices 0, 2, and 4 of x.
array[start:stop:step]; Slice elements from index start to stop-1 with a step size of step. Negative indices are interpreted as counting from the end of the array. Example: x[1:5:2] returns every other element from index 1 to 4 in array x.
array.real and array.imag; return the real and imaginary parts of a complex array. Example: x.real returns the real part of array x.
evals, evecs = np.linalg.eigh(a); Computes the eigenvalues and eigenvectors of a real symmetric matrix. Example: np.linalg.eigh(a) computes eigenvalues and eigenvectors of a.
np.all(condition, [axis=]); Returns True if all elements of the input array satisfy the condition. Optionally, you can specify the axis along which to operate. Example: np.all(x > 0, axis=1) checks if all elements in each row of x are greater than 0.
np.allclose(a, b, [atol=, rtol=]); Returns True if all elements of two arrays are approximately equal. atol and rtol are optional parameters specifying the absolute and relative tolerances, respectively. Example: np.allclose(x, y, atol=1e-10, rtol=1e-6) checks if arrays x and y are approximately equal within the specified tolerances.
np.any(condition, [axis=]); Returns True if any element of the input array satisfies the condition. Optionally, you can specify the axis along which to operate. Example: np.any(x > 0, axis=0) checks if any element in each column of x is greater than 0.
np.argmax(x, [axis=]); Returns the indices of the maximum values along an axis. Optionally, you can specify the axis. Example: np.argmax(x, axis=0) gives the indices of the maximum values along each column.
np.argmin(x, [axis=]); Returns the indices of the minimum values along an axis. Optionally, you can specify the axis. Example: np.argmin(x, axis=1) gives the indices of the minimum values along each row.
np.argsort(x, [axis=]); Returns the indices that would sort an array. Optionally, you can specify the axis. Example: np.argsort(x) gives the indices that would sort each row of the array.
np.clip(x, a_min, a_max); Clips (limits) the values in an array. Example: np.clip(x, 0, 1) clips the values in x to be between 0 and 1.
np.concatenate((a1, a2, ...), axis=); Join a sequence of arrays  along an existing axis. Example: np.concatenate((x, y), axis=0) concatenates arrays x and y along the first axis.
np.count_nonzero(x, [axis=]); Counts the number of non-zero values in the array. Optionally, you can specify the axis along which to operate. Example: np.count_nonzero(x, axis=0) counts the number of non-zero values in each column of x.
np.cov(x, [ rowvar=False]); Estimates the covariance matrix of a dataset. x and y are the variables to be considered. rowvar specifies whether each row represents a variable (True) or a sample (False). Example: np.cov(x, rowvar=False) computes the covariance matrix of  x arranged as columns.
np.cumprod(x, [axis=]); Returns the cumulative product of the elements along a given axis. Example: np.cumprod(x) returns the cumulative product of elements in array x.
np.cumsum(x, [axis=]); Returns the cumulative sum of the elements along a given axis. Example: np.cumsum(x) returns the cumulative sum of elements in array x.
np.diag(x); Extracts the diagonal of a matrix *or* expands a vector into a diagonal matrix. Example: np.diag(x) returns the diagonal of matrix x if x is a matrix. np.diag(np.diag(x)) returns a matrix with the diagonal elements of x on the diagonal.
np.diff(x, [n=, axis=]); Calculates the n-th discrete difference along the given axis. Example: np.diff(x, n=2) returns the second discrete difference of elements in array x.
np.digitize(x, bins); Returns the indices of the bins to which each value in input array belongs. Example: np.digitize(x, bins) returns the indices of the bins to which each value in x belongs.
np.einsum(subscripts, *operands); Evaluates the Einstein summation convention on the operands. Example: np.einsum('ij -> ji', a) transposes a matrix a. Letters are used to label axes. 
np.extract(condition, x); Returns the elements of an array that satisfy a condition. Example: np.extract(x > 0, x) returns the elements of array x that are greater than 0. Same as x[x > 0].
np.flatten(x); Returns a flattened array containing the same elements as the input array. Example: np.flatten(x) returns a flattened version of array x.
np.fft(x); Computes the one-dimensional discrete Fourier Transform. Example: np.fft(x) computes the one-dimensional discrete Fourier Transform of array x.
np.fftfreq(x) and np.rfftfreq(x); Computes the sample frequencies for a discrete Fourier Transform. Example: np.fftfreq(x) computes the sample frequencies for a discrete Fourier Transform of array x.
np.floor(x) or np.ceil(x); Returns the floor or ceiling (nearest whole number lesser/greater) of each element in the input array. Example: np.floor(x) returns the floor of each element in array x.
np.full(shape, fill_value, [dtype=]); Returns a new array of given shape and type, filled with a constant value. Example: np.full((3, 3), 5.0) creates a 3x3 array filled with the value 5.0.
np.gradient(x, [edge_order=]); Returns the gradient of an N-dimensional array. edge_order specifies the order of the edge used to calculate the gradient. Example: np.gradient(x, edge_order=2) returns the gradient of array x using a second-order edge.
np.histogram(x, [bins=]); Computes the histogram of a set of data. bins specifies the number of bins to use. Example: np.histogram(x, bins=10) computes the histogram of array x using 10 bins.
np.ifft(x); Computes the one-dimensional inverse discrete Fourier Transform. Example: np.ifft(x) computes the one-dimensional inverse discrete Fourier Transform of array x.
np.is[finite, inf, nan](x); Returns a boolean array indicating which elements are finite (not infinity or NaN), infinite, or Nan. Example: np.isfinite(x) returns a boolean array indicating which elements of x are finite. np.isnan(x) returns a boolean array indicating which elements of x are NaN.
np.linspace(start, stop, steps); Returns evenly spaced numbers over a specified interval. Example: np.linspace(0, 1, 11) returns 11 evenly spaced numbers between 0 and 1.
np.linalg.cond(a, [p=]); Computes the condition number of a matrix. p is an optional parameter specifying the norm used in the calculation (default is 2-norm). Example: np.linalg.cond(a, p=2) computes the 2-norm condition number of matrix a.
np.linalg.det(a); Computes the determinant of a square matrix. Example: np.linalg.det(a) computes the determinant of matrix a.
np.linalg.inv(a); Computes the multiplicative inverse of a matrix. Example: np.linalg.inv(a) computes the inverse of matrix a if it exists. Raises an error if the matrix is singular or not square.
np.linalg.norm(x, [ord=, axis=]); Computes the norm of a vector or matrix. ord specifies the type of norm to compute (default is L2 norm). axis specifies the axis that is reduced over. Example: np.linalg.norm(x, ord=2, axis=1) computes L2 norms of rows in a matrix.
np.linalg.pinv(a); Computes the (Moore-Penrose) pseudo-inverse of a matrix. rcond is an optional parameter specifying the singular values below which singular values are considered zero. Example: np.linalg.pinv(a, rcond=1e-15) computes the pseudo-inverse of matrix a with a specified tolerance for singular values.
np.loadtxt(fname); Loads data from a text file. fname is the name of the file to load. Example: np.loadtxt('data.txt') loads data from the file data.txt.
np.max(x, [axis=]); Returns the maximum value along an axis. Optionally, you can specify the axis. Example: np.max(x, axis=0) computes the maximum values along each column.
np.mean(x, [axis=]); Reduction; computes the mean over an array. Optionally only reduces over the specified axes. Example: np.mean(x, axis=1)
np.meshgrid(*xi, **kwargs); Returns coordinate matrices from coordinate vectors. Example: X, Y = np.meshgrid(x, y) creates 2D grids of coordinates X and Y from 1D arrays x and y, respectively.
np.min(x, [axis=]); Returns the minimum value along an axis. Optionally, you can specify the axis. Example: np.min(x, axis=1) computes the minimum values along each row.
np.nan[min, max, sum, prod, mean, cumsum, cumprod, argmin, argmax, std, median]; Returns the minimum, maximum, etc. of an array ignoring NaN values. Example: np.nanmean(x) returns the mean of array x ignoring NaN values.
np.nextafter(x1, x2); Returns the next floating-point value after x1 towards x2. Example: np.nextafter(1.0, 2.0) returns the next floating-point value after 1.0 towards 2.0.
np.nonzero(a); Return the indices of the elements that are non-zero. Example: np.nonzero(x) returns a tuple of arrays representing the indices of non-zero elements in x.
np.ones(shape, [dtype=]); Returns a new array of given shape and type, filled with ones. Example: np.ones((3, 2), dtype=float) creates a 3x2 array filled with ones.
np.ravel(x); Returns a flattened array containing the same elements as the input array. Example: np.ravel(x) returns a flattened version of array x.
np.repeat(a, repeats, [axis=]); Repeats elements of an array. The repeats argument specifies the number of repetitions for each element. Optionally, you can specify the axis along which to repeat values. Example: np.repeat(x, 3, axis=1) repeats each column of x three times.
np.reshape(x, newshape); Gives a new shape to an array without changing its data. Example: np.reshape(x, (2, 3)) reshapes array x to a 2x3 matrix. Cannot change the total number of elements.
np.rfft(x) and np.irfft(x); Computes the one-dimensional discrete Fourier Transform for real input. Example: np.rfft(x) computes the one-dimensional discrete Fourier Transform of real array x.
np.savetxt(fname, x); Saves an array to a text file. fname is the name of the file to save to. Example: np.savetxt('data.txt', x) saves array x to the file data.txt.
np.searchsorted(a, v, [side=]); Finds indices where elements should be inserted to maintain order. a is the input array and v is the values to insert. side specifies whether to return the first index (left) or last index (right) if the value is repeated. Example: np.searchsorted(a, v, side='left') returns the indices where values v should be inserted into array a to maintain order.
np.seterr(); change trapping of floating point exceptions. Example: np.seterr(divide='ignore') ignores division by zero errors.
np.sign(x); Returns an array of the same shape as x with elements indicating the sign of each element in the input array. Positive elements are represented as 1, negative elements as -1, and zeros as 0. Example: np.sign(x) returns an array with the signs of elements in x.
np.sort(x, [axis=]); Returns a sorted copy of an array. Optionally, you can specify the axis. Example: np.sort(x, axis=0) sorts each column of the array.
np.squeeze(x, [axis=]); Removes single-dimensional entries from the shape of an array. Optionally, you can specify the axis to remove particular dimensions. Example: np.squeeze(x, axis=1) removes the second dimension if it has size 1.
np.stack(arrays, axis=); Join arrays *of the same shapealong a new axis. Example: np.stack((x, y)) stacks arrays x and y and adds a new dimension at the front.
np.std(x, [axis=]); Computes the standard deviation along the specified axis. Example: np.std(x, axis=0) computes the standard deviation of each column of x.
np.sum(x, [axis=]); Reduction; computes the sum over an array. Optionally only reduces over the specified axes. Example: np.sum(x, axis=0)
np.swapaxes(x, axis1, axis2); Interchanges two axes of an array. Example: np.swapaxes(x, 0, 1) swaps the first and second axes of array x.
np.tile(x, reps); Construct an array by repeating x the number of times given by reps. Example: np.tile(x, (2, 3)) creates a 2x3 tiling of x.
np.trace(a, [offset=, axis1=, axis2=]); Computes the sum along diagonals of a square matrix. offset is an optional parameter specifying the diagonal in question (0 for the main diagonal). axis1 and axis2 specify the axes along which to compute the trace for higher-dimensional arrays. Example: np.trace(a, offset=1) computes the sum of elements above the main diagonal of the matrix a.
np.transpose(x); Reverses the dimensions of an array
np.unravel_index(indices, shape); Converts a flat index or array of flat indices into a tuple of coordinate arrays. Example: np.unravel_index(22, (3, 4)) converts index 22 in a 3x4 array to coordinates (5, 2). Useful for converting argmin/argmax results to coordinates.
np.where(condition, [x=, y=]); Return elements chosen from x or y depending on the condition. If only condition is provided, it returns the indices where condition is True. If x and y are provided, it returns elements from x where condition is True, and from y where condition is False. Example: np.where(x > 0, x, 0) replaces negative elements in x with 0.
np.zeros(shape, [dtype=]); Returns a new array of given shape and type, filled with zeros. Example: np.zeros((2, 3), dtype=int) creates a 2x3 array filled with zeros.
rng = np.random.default_rng(); Creates a random number generator. Example: rng = np.random.default_rng() creates a random number generator rng.
rng.normal(loc=, scale=, size=); Returns an array of random samples from a normal distribution. loc specifies the mean, scale specifies the standard deviation, and size specifies the shape of the output array. Example: rng.normal(loc=0.0, scale=1.0, size=(2, 3)) returns a 2x3 array of samples from a standard normal distribution.
rng.permutation(x); Randomly permutes a sequence, or returns a permuted range. Example: rng.permutation(x) returns a randomly permuted version of array x.
rng.randint(low=, high=, size=); Returns an array of random integers from low (inclusive) to high (exclusive). size specifies the shape of the output array. Example: rng.randint(low=0, high=10, size=(2, 3)) returns a 2x3 array of random integers from 0 to 9.
rng.uniform(low=, high=, size=); Returns an array of random samples from a uniform distribution. low specifies the lower bound, high specifies the upper bound, and size specifies the shape of the output array. Example: rng.uniform(low=-1.0, high=1.0, size=(2, 3)) returns a 2x3 array of samples from a uniform distribution over [-1, 1).
u, s, vt = np.linalg.svd(a); Computes the singular value decomposition of a matrix.  Example: np.linalg.svd(a) returns the singular value decomposition of matrix a.